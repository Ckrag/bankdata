/*
 * This file is generated by jOOQ.
 */
package dk.ckrag.jooq;


import dk.ckrag.jooq.tables.Account;
import dk.ckrag.jooq.tables.Transaction;
import dk.ckrag.jooq.tables.User;
import dk.ckrag.jooq.tables.records.AccountRecord;
import dk.ckrag.jooq.tables.records.TransactionRecord;
import dk.ckrag.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("transaction_pkey"), new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, UserRecord> ACCOUNT__FK_USER = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_user"), new TableField[] { Account.ACCOUNT.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TransactionRecord, AccountRecord> TRANSACTION__FK_FROM_ACCOUNT = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_from_account"), new TableField[] { Transaction.TRANSACTION.FROM_ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TransactionRecord, AccountRecord> TRANSACTION__FK_TO_ACCOUNT = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_to_account"), new TableField[] { Transaction.TRANSACTION.TO_ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
